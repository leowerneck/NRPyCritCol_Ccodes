
void ID_BSSN_lambdas(const int Nxx[3],const int Nxx_plus_2NGHOSTS[3],REAL *xx[3],const REAL dxx[3],REAL *in_gfs) {
const REAL invdx0 = 1.0/dxx[0];
#pragma omp parallel for
for(int i2=NGHOSTS; i2<NGHOSTS+Nxx[2]; i2++) {
    for(int i1=NGHOSTS; i1<NGHOSTS+Nxx[1]; i1++) {
        const REAL xx1 = xx[1][i1];
        for(int i0=NGHOSTS; i0<NGHOSTS+Nxx[0]; i0++) {
            const REAL xx0 = xx[0][i0];
               /* 
                * NRPy+ Finite Difference Code Generation, Step 1 of 2: Read from main memory and compute finite difference stencils:
                */
               const double hDD00_i0m2_i1_i2 = in_gfs[IDX4(HDD00GF, i0-2,i1,i2)];
               const double hDD00_i0m1_i1_i2 = in_gfs[IDX4(HDD00GF, i0-1,i1,i2)];
               const double hDD00 = in_gfs[IDX4(HDD00GF, i0,i1,i2)];
               const double hDD00_i0p1_i1_i2 = in_gfs[IDX4(HDD00GF, i0+1,i1,i2)];
               const double hDD00_i0p2_i1_i2 = in_gfs[IDX4(HDD00GF, i0+2,i1,i2)];
               const double hDD01_i0m2_i1_i2 = in_gfs[IDX4(HDD01GF, i0-2,i1,i2)];
               const double hDD01_i0m1_i1_i2 = in_gfs[IDX4(HDD01GF, i0-1,i1,i2)];
               const double hDD01 = in_gfs[IDX4(HDD01GF, i0,i1,i2)];
               const double hDD01_i0p1_i1_i2 = in_gfs[IDX4(HDD01GF, i0+1,i1,i2)];
               const double hDD01_i0p2_i1_i2 = in_gfs[IDX4(HDD01GF, i0+2,i1,i2)];
               const double hDD02_i0m2_i1_i2 = in_gfs[IDX4(HDD02GF, i0-2,i1,i2)];
               const double hDD02_i0m1_i1_i2 = in_gfs[IDX4(HDD02GF, i0-1,i1,i2)];
               const double hDD02 = in_gfs[IDX4(HDD02GF, i0,i1,i2)];
               const double hDD02_i0p1_i1_i2 = in_gfs[IDX4(HDD02GF, i0+1,i1,i2)];
               const double hDD02_i0p2_i1_i2 = in_gfs[IDX4(HDD02GF, i0+2,i1,i2)];
               const double hDD11_i0m2_i1_i2 = in_gfs[IDX4(HDD11GF, i0-2,i1,i2)];
               const double hDD11_i0m1_i1_i2 = in_gfs[IDX4(HDD11GF, i0-1,i1,i2)];
               const double hDD11 = in_gfs[IDX4(HDD11GF, i0,i1,i2)];
               const double hDD11_i0p1_i1_i2 = in_gfs[IDX4(HDD11GF, i0+1,i1,i2)];
               const double hDD11_i0p2_i1_i2 = in_gfs[IDX4(HDD11GF, i0+2,i1,i2)];
               const double hDD12_i0m2_i1_i2 = in_gfs[IDX4(HDD12GF, i0-2,i1,i2)];
               const double hDD12_i0m1_i1_i2 = in_gfs[IDX4(HDD12GF, i0-1,i1,i2)];
               const double hDD12 = in_gfs[IDX4(HDD12GF, i0,i1,i2)];
               const double hDD12_i0p1_i1_i2 = in_gfs[IDX4(HDD12GF, i0+1,i1,i2)];
               const double hDD12_i0p2_i1_i2 = in_gfs[IDX4(HDD12GF, i0+2,i1,i2)];
               const double hDD22_i0m2_i1_i2 = in_gfs[IDX4(HDD22GF, i0-2,i1,i2)];
               const double hDD22_i0m1_i1_i2 = in_gfs[IDX4(HDD22GF, i0-1,i1,i2)];
               const double hDD22 = in_gfs[IDX4(HDD22GF, i0,i1,i2)];
               const double hDD22_i0p1_i1_i2 = in_gfs[IDX4(HDD22GF, i0+1,i1,i2)];
               const double hDD22_i0p2_i1_i2 = in_gfs[IDX4(HDD22GF, i0+2,i1,i2)];
                     const double hDD_dD000 = invdx0*(-2.0/3.0*hDD00_i0m1_i1_i2 + (1.0/12.0)*hDD00_i0m2_i1_i2 + (2.0/3.0)*hDD00_i0p1_i1_i2 - 1.0/12.0*hDD00_i0p2_i1_i2);
                     const double hDD_dD010 = invdx0*(-2.0/3.0*hDD01_i0m1_i1_i2 + (1.0/12.0)*hDD01_i0m2_i1_i2 + (2.0/3.0)*hDD01_i0p1_i1_i2 - 1.0/12.0*hDD01_i0p2_i1_i2);
                     const double hDD_dD020 = invdx0*(-2.0/3.0*hDD02_i0m1_i1_i2 + (1.0/12.0)*hDD02_i0m2_i1_i2 + (2.0/3.0)*hDD02_i0p1_i1_i2 - 1.0/12.0*hDD02_i0p2_i1_i2);
                     const double hDD_dD110 = invdx0*(-2.0/3.0*hDD11_i0m1_i1_i2 + (1.0/12.0)*hDD11_i0m2_i1_i2 + (2.0/3.0)*hDD11_i0p1_i1_i2 - 1.0/12.0*hDD11_i0p2_i1_i2);
                     const double hDD_dD120 = invdx0*(-2.0/3.0*hDD12_i0m1_i1_i2 + (1.0/12.0)*hDD12_i0m2_i1_i2 + (2.0/3.0)*hDD12_i0p1_i1_i2 - 1.0/12.0*hDD12_i0p2_i1_i2);
                     const double hDD_dD220 = invdx0*(-2.0/3.0*hDD22_i0m1_i1_i2 + (1.0/12.0)*hDD22_i0m2_i1_i2 + (2.0/3.0)*hDD22_i0p1_i1_i2 - 1.0/12.0*hDD22_i0p2_i1_i2);
               /* 
                * NRPy+ Finite Difference Code Generation, Step 2 of 2: Evaluate SymPy expressions and write to main memory:
                */
               const double tmp0 = 1.0/SINHW;
               const double tmp1 = tmp0*xx0;
               const double tmp2 = exp(tmp1);
               const double tmp3 = tmp0*tmp2;
               const double tmp4 = exp(-tmp1);
               const double tmp5 = tmp0*tmp4;
               const double tmp6 = tmp3 + tmp5;
               const double tmp7 = cos(xx1);
               const double tmp8 = sin(xx1);
               const double tmp9 = tmp2 - tmp4;
               const double tmp10 = pow(tmp9, 2);
               const double tmp11 = pow(AMPL, 2);
               const double tmp12 = exp(tmp0) - exp(-tmp0);
               const double tmp13 = pow(tmp12, 2);
               const double tmp14 = tmp11/tmp13;
               const double tmp15 = tmp10*tmp14;
               const double tmp16 = tmp15*tmp8;
               const double tmp17 = 2*hDD22*tmp16*tmp7;
               const double tmp18 = 2*tmp0;
               const double tmp19 = exp(tmp18);
               const double tmp20 = exp(2*tmp1);
               const double tmp21 = pow(1 - tmp20, 2)*exp(tmp18*(1 - xx0))*sin(2*xx1)/pow(1 - tmp19, 2);
               const double tmp22 = tmp11*tmp21;
               const double tmp23 = tmp17 + tmp22;
               const double tmp24 = pow(AMPL, 4)/pow(tmp12, 4);
               const double tmp25 = hDD12*tmp8;
               const double tmp26 = tmp6*pow(tmp9, 3);
               const double tmp27 = hDD11*tmp15 + tmp15;
               const double tmp28 = tmp14*tmp9;
               const double tmp29 = tmp28*tmp6;
               const double tmp30 = hDD02*tmp29;
               const double tmp31 = hDD01*tmp24*tmp25*tmp26 - tmp27*tmp30*tmp8;
               const double tmp32 = pow(tmp6, 2);
               const double tmp33 = pow(tmp8, 2);
               const double tmp34 = pow(tmp9, 4);
               const double tmp35 = 2*hDD01;
               const double tmp36 = hDD02*hDD12;
               const double tmp37 = tmp14*tmp32;
               const double tmp38 = hDD00*tmp37 + tmp37;
               const double tmp39 = tmp24*tmp33;
               const double tmp40 = pow(hDD12, 2)*tmp34*tmp39;
               const double tmp41 = tmp10*tmp24*tmp32;
               const double tmp42 = pow(hDD02, 2)*tmp33*tmp41;
               const double tmp43 = tmp15*tmp33;
               const double tmp44 = hDD22*tmp43 + tmp43;
               const double tmp45 = pow(hDD01, 2)*tmp41;
               const double tmp46 = tmp27*tmp38;
               const double tmp47 = 1.0/(pow(AMPL, 6)*tmp32*tmp33*tmp34*tmp35*tmp36/pow(tmp12, 6) - tmp27*tmp42 - tmp38*tmp40 - tmp44*tmp45 + tmp44*tmp46);
               const double tmp48 = (1.0/2.0)*tmp47;
               const double tmp49 = tmp31*tmp48;
               const double tmp50 = hDD_dD120*tmp16;
               const double tmp51 = tmp30*tmp7;
               const double tmp52 = tmp28*(2*tmp3 + 2*tmp5);
               const double tmp53 = tmp25*tmp52;
               const double tmp54 = -tmp50 + tmp51 - tmp53;
               const double tmp55 = tmp47*(tmp27*tmp44 - tmp40);
               const double tmp56 = (1.0/2.0)*tmp55;
               const double tmp57 = hDD01*hDD02*tmp41*tmp8 - hDD12*tmp16*tmp38;
               const double tmp58 = 2*tmp47;
               const double tmp59 = tmp57*tmp58;
               const double tmp60 = tmp13/tmp32;
               const double tmp61 = (tmp20 - 1)*(tmp20 + 1)*exp(-tmp18*(xx0 - 1))/pow(tmp19 - 1, 2);
               const double tmp62 = tmp0*tmp61;
               const double tmp63 = tmp60*tmp62;
               const double tmp64 = hDD12*tmp15*tmp7;
               const double tmp65 = tmp47*tmp64;
               const double tmp66 = hDD_dD110*tmp15;
               const double tmp67 = tmp11*tmp18*tmp61;
               const double tmp68 = hDD11*tmp52;
               const double tmp69 = -tmp66 - tmp67 - tmp68;
               const double tmp70 = tmp47*(tmp38*tmp44 - tmp42);
               const double tmp71 = tmp66 + tmp67 + tmp68;
               const double tmp72 = -hDD01*tmp29*tmp44 + tmp26*tmp36*tmp39;
               const double tmp73 = tmp48*tmp72;
               const double tmp74 = tmp50 + tmp53;
               const double tmp75 = tmp51 + tmp74;
               const double tmp76 = tmp58*tmp72;
               const double tmp77 = hDD_dD220*tmp43;
               const double tmp78 = tmp33*tmp67;
               const double tmp79 = hDD22*tmp33*tmp52;
               const double tmp80 = tmp77 + tmp78 + tmp79;
               const double tmp81 = -tmp51 + tmp74;
               const double tmp82 = tmp31*tmp58;
               const double tmp83 = -tmp17 - tmp22;
               const double tmp84 = -tmp77 - tmp78 - tmp79;
               const double tmp85 = tmp47*(-tmp45 + tmp46);
               const double tmp86 = tmp61/pow(SINHW, 3);
               const double tmp87 = pow(SINHW, -2);
               const double tmp88 = tmp2*tmp87;
               const double tmp89 = tmp4*tmp87;
               const double tmp90 = hDD00*tmp14*tmp6*(2*tmp88 - 2*tmp89) + hDD_dD000*tmp37 + 2*tmp11*tmp86;
               const double tmp91 = 2*tmp29;
               const double tmp92 = tmp28*(tmp88 - tmp89);
               const double tmp93 = 2*hDD02*(tmp37*tmp8 + tmp8*tmp92) + hDD_dD020*tmp8*tmp91;
               const double tmp94 = hDD_dD010*tmp91 + tmp35*(tmp37 + tmp92);
               const double tmp95 = AMPL/tmp12;
               const double tmp96 = tmp48*tmp57;
               const double tmp97 = (1.0/2.0)*tmp70;
               const double tmp98 = tmp13/tmp10;
               const double tmp99 = (1.0/2.0)*tmp21*tmp98;
               const double tmp100 = -tmp62*tmp98;
               const double tmp101 = tmp9*tmp95;
               const double tmp102 = (1.0/2.0)*tmp85;
               in_gfs[IDX4(LAMBDAU0GF, i0, i1, i2)] = tmp6*tmp95*(tmp55*(tmp49*tmp93 + tmp56*tmp90 - tmp60*tmp86 + tmp73*tmp94) + tmp59*(tmp23*tmp49 + tmp54*tmp56) + tmp70*(tmp31*tmp65 + tmp56*tmp69 + tmp63) + tmp76*(tmp49*tmp75 + tmp71*tmp73) + tmp82*(tmp49*tmp80 + tmp73*tmp81) + tmp85*(tmp33*tmp63 + tmp56*tmp84 + tmp73*tmp83));
               in_gfs[IDX4(LAMBDAU1GF, i0, i1, i2)] = tmp101*(tmp55*(tmp73*tmp90 + tmp93*tmp96 + tmp94*tmp97) + tmp59*(tmp23*tmp96 + tmp54*tmp73) + tmp70*(tmp57*tmp65 + tmp69*tmp73) + tmp76*(tmp100 + tmp71*tmp97 + tmp75*tmp96) + tmp82*(tmp80*tmp96 + tmp81*tmp97) + tmp85*(tmp73*tmp84 + tmp83*tmp97 + tmp99));
               in_gfs[IDX4(LAMBDAU2GF, i0, i1, i2)] = tmp101*tmp8*(tmp55*(tmp102*tmp93 + tmp49*tmp90 + tmp94*tmp96) + tmp59*(tmp102*tmp23 + tmp49*tmp54 - tmp99/tmp33) + tmp70*(tmp49*tmp69 + tmp64*tmp85) + tmp76*(tmp102*tmp75 + tmp71*tmp96) + tmp82*(tmp100 + tmp102*tmp80 + tmp81*tmp96) + tmp85*(tmp49*tmp84 + tmp83*tmp96));
            
            
        } // END LOOP: for(int i0=NGHOSTS; i0<NGHOSTS+Nxx[0]; i0++)
    } // END LOOP: for(int i1=NGHOSTS; i1<NGHOSTS+Nxx[1]; i1++)
} // END LOOP: for(int i2=NGHOSTS; i2<NGHOSTS+Nxx[2]; i2++)
}
